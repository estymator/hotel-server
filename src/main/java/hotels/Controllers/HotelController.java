package hotels.Controllers;


import java.security.Principal;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

import hotels.Repositories.*;
import hotels.models.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.ModelAndView;

@CrossOrigin
@RestController
public class HotelController {


    @Autowired // This means to get the bean called HotelRepository Which is auto-generated by Spring
    private HotelRepository hotelRepository;


    @Autowired
    private DaneLogowaniaRepository daneLogowaniaRepository;
    @Autowired
    private KlientRepository klientRepository;

    @PostMapping(path="/register")
    public @ResponseBody Klient addNewUser(@RequestParam String imie,
                                           @RequestParam String nazwisko,
                                           @RequestParam String telefon,
                                           @RequestParam String email,
                                           @RequestParam String login,
                                           @RequestParam String haslo){
        DaneLogowania d = new DaneLogowania();
        d.setHaslo(haslo);
        d.setLogin(login);
        daneLogowaniaRepository.save(d);
        Klient k = new Klient();
        k.setImie(imie);
        k.setNazwisko(nazwisko);
        k.setAdres_mail(email);
        k.setNr_telefonu(telefon);
        k.setLogin(login);
        klientRepository.save(k);
        System.out.println("Rejestracja " + k.getImie());
        return k;
    }

    Iterable<Klient> findKlientByLogin(@RequestParam String login)
    {
        System.out.println("Klient login");
        return klientRepository.findBylogin(login);
    }

    @GetMapping(path="/home")
    public @ResponseBody Iterable<Klient> sendHome(Principal principal)
    {
        System.out.println("/home "+principal.getName());
        return findKlientByLogin(principal.getName());
    }



    @GetMapping(path="/error")
    public String errorPage()
    {
        System.out.println("Error");
        return "Error";
    }

    @GetMapping(path="/")
    public @ResponseBody String sendRoot()
    {
        return "root";
    }

    @GetMapping(path="/login")
    public ModelAndView login()
    {
        System.out.println("Logowanie");
        ModelAndView mv = new ModelAndView();
        mv.setViewName("login");
        return mv;
    }


    @PostMapping(path="/hotel/add") // Map ONLY POST Requests
    public @ResponseBody Hotel addNewHotel (@RequestParam String nazwa
            , @RequestParam String adres
            , @RequestParam String email
            , @RequestParam String telefon) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Hotel h = new Hotel();
        h.setNazwa(nazwa);
        h.setAdres(adres);
        h.setAdres_mail(email);
        h.setNr_telefonu(telefon);
        System.out.println("Dodano hotel "+ h.getNazwa());
        hotelRepository.save(h);
        return h;
    }

    @GetMapping(path="/hotel/all")
    public @ResponseBody Iterable<Hotel> getAllUsers() {
        // This returns a JSON or XML with the users
        System.out.println("hotel all");
        return hotelRepository.findAll();
    }

    @DeleteMapping(path="/hotel/id")
    public @ResponseBody String deleteHotelById(@RequestParam Integer id_hotelu)
    {
        hotelRepository.deleteById(id_hotelu);
        return "deleted";
    }








}