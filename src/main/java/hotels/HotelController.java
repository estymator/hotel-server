package hotels;


import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

import hotels.Repositories.*;
import hotels.models.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.ModelAndView;

@RestController
public class HotelController {


    @Autowired // This means to get the bean called PersonelRepository Which is auto-generated by Spring, we will use it to handle the data
    private HotelRepository hotelRepository;
    @Autowired
    private PersonelRepository personelRepository;
    @Autowired
    private KlientRepository klientRepository;
    @Autowired
    private DaneLogowaniaRepository daneLogowaniaRepository;
    @Autowired
    private PokojRepository pokojRepository;

    @PostMapping(path="/register")
    public @ResponseBody String addNewUser(@RequestParam String imie,
                                           @RequestParam String nazwisko,
                                           @RequestParam String telefon,
                                           @RequestParam String email,
                                           @RequestParam String login,
                                           @RequestParam String haslo){
        DaneLogowania d = new DaneLogowania();
        d.setHaslo(haslo);
        d.setLogin(login);
        daneLogowaniaRepository.save(d);
        Klient k = new Klient();
        k.setImie(imie);
        k.setNazwisko(nazwisko);
        k.setAdres_mail(email);
        k.setNr_telefonu(telefon);
        k.setLogin(login);
        klientRepository.save(k);

        return "Saved";
    }


    @PostMapping(path="/hotel/add") // Map ONLY POST Requests
    public @ResponseBody String addNewHotel (@RequestParam String nazwa
            , @RequestParam String adres
            , @RequestParam String email
            , @RequestParam String telefon
            , @RequestParam Integer id_admina) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Hotel h = new Hotel();
        h.setNazwa(nazwa);
        h.setAdres(adres);
        h.setAdres_mail(email);
        h.setNr_telefonu(telefon);
        h.setId_admina(id_admina);
        hotelRepository.save(h);
        return "Saved";
    }

    @GetMapping(path="/hotel/all")
    public @ResponseBody Iterable<Hotel> getAllUsers() {
        // This returns a JSON or XML with the users
        return hotelRepository.findAll();
    }

    @PostMapping(path="/personel/add")
    public @ResponseBody String addNewPersonel(@RequestParam String imie,
                                               @RequestParam String nazwisko,
                                               @RequestParam String email,
                                               @RequestParam String telefon,
                                               @RequestParam Integer idHotelu){
        System.out.println(imie+nazwisko+email+telefon+idHotelu);
        Personel  p =new Personel();
        p.setImie(imie);
        p.setNazwisko(nazwisko);
        p.setAdres_mail(email);
        p.setNr_telefonu(telefon);
        p.setIdHotelu(idHotelu);
        personelRepository.save(p);
        return "saved";
    }

    @PostMapping(path="/personel/delete")
    public @ResponseBody
    String deletePersonel(@RequestParam Integer id_personelu)
    {
        personelRepository.deleteById(id_personelu);
        return "Deleted";
    }

    @PostMapping(path="/personel/id", params = "id_personelu")
    public @ResponseBody
    Optional<Personel> findPersonelById(@RequestParam Integer id_personelu)
    {
        return personelRepository.findById(id_personelu);
    }

    @PostMapping(path="/personel/id", params = "idHotelu")
    public @ResponseBody
    Iterable<Personel> findPersonelByIdHotelu(@RequestParam Integer idHotelu)
    {
        System.out.println(idHotelu);
        return personelRepository.findByidHotelu(idHotelu);
    }


    @GetMapping(path="/personel/all")
    public @ResponseBody Iterable<Personel> getAllPersonel()
    {
        return personelRepository.findAll();
    }

    @GetMapping(path="/")
    public @ResponseBody String returnSomething()
    {
        return "root";
    }

    @GetMapping(path="/login")
    public ModelAndView login()
    {
        System.out.println("kurde faja");
        ModelAndView mv = new ModelAndView();
        mv.setViewName("login");
        return mv;
    }

    @GetMapping(path="/home")
    public @ResponseBody String returnSomething3()
    {
        return "get home";
    }

    @PostMapping(path="/pokoj/add")
    public @ResponseBody String addPokoj(@RequestParam Integer ilosc_osob,
                                         @RequestParam String standart,
                                         @RequestParam String status,
                                         @RequestParam Integer idHotelu){
        Pokoj p =new Pokoj();
        p.setIloscOsob(ilosc_osob);
        p.setStandart(standart);
        p.setStatus(status);
        p.setIdHotelu(idHotelu);
        pokojRepository.save(p);
        return "Added";
    }


}